[
	// -- disable a bunch of keybindings which may have conflicts with above keybindings
	{
		"key": "ctrl+p",
		"command": "workbench.action.togglePanel"
	},
	{
		"key": "ctrl+j",
		"command": "-editor.action.insertLineAfter",
		"when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'"
	},
	{
		"key": "ctrl+k ctrl+i",
		"command": "-editor.action.showHover",
		"when": "editorTextFocus"
	},
	{
		"key": "shift+tab",
		"command": "-acceptAlternativeSelectedSuggestion",
		"when": "suggestWidgetVisible && textInputFocus && textInputFocus"
	},
	{
		"key": "ctrl+h",
		"command": "-editor.action.startFindReplaceAction",
		"when": "editorFocus || editorIsOpen"
	},
	{
		"key": "ctrl+p",
		"command": "-workbench.action.quickOpen"
	},
	{
		"key": "ctrl+h",
		"command": "-java.action.showTypeHierarchy",
		"when": "editorTextFocus && editorLangId == 'java'"
	},
	{
		"key": "ctrl+h",
		"command": "-extension.vim_ctrl+h",
		"when": "editorTextFocus && vim.active && vim.use<C-h> && !inDebugRepl"
	},
	{
		"key": "ctrl+h",
		"command": "-extension.dash.specific",
		"when": "editorTextFocus"
	},
	{
		"key": "ctrl+e",
		"command": "-workbench.action.quickOpen"
	},
	{
		"key": "ctrl+l",
		"command": "-expandLineSelection",
		"when": "textInputFocus"
	},
	{
		"key": "alt+2",
		"command": "-workbench.action.openEditorAtIndex2"
	},
	{
		"key": "alt+2",
		"command": "workbench.action.toggleAuxiliaryBar"
	},
	{
		"key": "space",
		"command": "-breadcrumbs.revealFocused",
		"when": "breadcrumbsActive && breadcrumbsVisible"
	},
	{
		"key": "space",
		"command": "-debug.toggleBreakpoint",
		"when": "breakpointsFocused && !inputFocus"
	},
	{
		"key": "space",
		"command": "-filesExplorer.openFilePreserveFocus",
		"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus"
	},
	{
		"key": "space",
		"command": "-list.toggleExpand",
		"when": "listFocus && !inputFocus"
	},
	{
		"key": "space",
		"command": "-notification.toggle",
		"when": "notificationFocus"
	},
	{
		"key": "space",
		"command": "-refactorPreview.toggleCheckedState",
		"when": "listFocus && refactorPreview.enabled && !inputFocus"
	},
	{
		"key": "tab",
		"command": "extension.vim_tab",
		"when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert' && editorLangId != 'magit'"
	},
	{
		"key": "tab",
		"command": "-extension.vim_tab",
		"when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
	},
	{
		"key": "x",
		"command": "magit.discard-at-point",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "k",
		"command": "-magit.discard-at-point"
	},
	{
		"key": "-",
		"command": "magit.reverse-at-point",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "v",
		"command": "-magit.reverse-at-point"
	},
	{
		"key": "shift+-",
		"command": "magit.reverting",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "shift+v",
		"command": "-magit.reverting"
	},
	{
		"key": "shift+o",
		"command": "magit.resetting",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "shift+x",
		"command": "-magit.resetting"
	},
	{
		"key": "x",
		"command": "-magit.reset-mixed"
	},
	{
		"key": "ctrl+u x",
		"command": "-magit.reset-hard"
	},
	{
		"key": "y",
		"command": "-magit.show-refs"
	},
	{
		"key": "ctrl+j",
		"command": "workbench.action.quickOpenSelectNext",
		"when": "inQuickOpen"
	},
	{
		"key": "ctrl+k",
		"command": "workbench.action.quickOpenSelectPrevious",
		"when": "inQuickOpen"
	},
	{
		"key": "ctrl+j",
		"command": "selectNextSuggestion",
		"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
	},
	{
		"key": "ctrl+k",
		"command": "selectPrevSuggestion",
		"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
	},
	{
		"key": "ctrl+l",
		"command": "acceptSelectedSuggestion",
		"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
	},
	{
		"key": "ctrl+j",
		"command": "showNextParameterHint",
		"when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
	},
	{
		"key": "ctrl+k",
		"command": "showPrevParameterHint",
		"when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
	},
	{
		"key": "ctrl+h",
		"command": "file-browser.stepOut",
		"when": "inFileBrowser"
	},
	{
		"key": "ctrl+l",
		"command": "file-browser.stepIn",
		"when": "inFileBrowser"
	},
	{
		"key": "f6",
		"command": "workbench.action.debug.stepOver",
		"when": "debugState == 'stopped'"
	},
	{
		"key": "f8",
		"command": "-workbench.action.debug.stepOver",
		"when": "debugState == 'stopped'"
	},
	{
		"key": "f8",
		"command": "workbench.action.debug.stepOut",
		"when": "debugState == 'stopped'"
	},
	{
		"key": "f6",
		"command": "-workbench.action.debug.pause",
		"when": "debugState == 'running'"
	},
	{
		"key": "f4",
		"command": "workbench.action.debug.stop",
		"when": "inDebugMode && !focusedSessionIsAttach"
	},
	{
		"key": "ctrl+oem_plus",
		"command": "-workbench.action.zoomIn"
	},
	{
		"key": "ctrl+shift+oem_plus",
		"command": "-workbench.action.zoomIn"
	},
	{
		"key": "enter",
		"command": "-revealReference",
		"when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand"
	},
	{
		"key": "space",
		"command": "whichkey.show",
		"when": "!inputFocus"
	},
	{
		"key": "alt+backspace",
		"command": "git.stageChange"
	},
	{
		"key": "ctrl+n",
		"command": "editor.action.triggerParameterHints",
		"when": "editorHasSignatureHelpProvider && editorTextFocus"
	},
	{
		"key": "ctrl+m",
		"command": "-editor.action.toggleTabFocusMode"
	},
	{
		"key": "tab",
		"command": "-insertBestCompletion",
		"when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
	},
	{
		"key": "tab",
		"command": "-insertNextSuggestion",
		"when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
	}
]

